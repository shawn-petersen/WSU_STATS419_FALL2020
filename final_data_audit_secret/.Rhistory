my.git$groups$days = list("days" = days, "file" = days.file, "insert" = days.insert, "delete" = days.delete);
my.git$groups$weeks = list("weeks" = weeks, "file" = weeks.file, "insert" = weeks.insert, "delete" = weeks.delete);
my.object$git = my.git;
plot(hours, hours.file,   bty="n", type="l");  # 0 is midnight
plot(hours, hours.insert, bty="n", type="l");
plot(hours, hours.delete, bty="n", type="l");
plot(days, days.file,   bty="n", type="l");    # 1 is Monday
plot(days, days.insert, bty="n", type="l");
plot(days, days.delete, bty="n", type="l");
plot(weeks, weeks.file,   bty="n", type="l");  # 36 is August 30, 2020
plot(weeks, weeks.insert, bty="n", type="l");  # https://savvytime.com/week-number
plot(weeks, weeks.delete, bty="n", type="l");
###############################################
### Feel free to improve on the graphics, if you desire, totally optional ...
# you need to upload the .rds and .html file after you KNIT ...
saveRDS(my.object, paste0(path.to.git.final,"workspaceAudit.rds") );
library(devtools);
library(humanVerseWSU);
path.github = "https://raw.githubusercontent.com/MonteShaffer/humanVerseWSU/master/";
include.me = paste0(path.github, "misc/functions-nlp.R");
source_url( include.me );
include.me = paste0(path.github, "misc/functions-nlp-str.R");
source_url( include.me );
include.me = paste0(path.github, "misc/functions-nlp-stack.R");
source_url( include.me );
include.me = paste0(path.github, "misc/functions-nlp-pos.R");
source_url( include.me );
include.me = paste0(path.github, "humanVerseWSU/R/functions-encryption.R");
source_url( include.me );
###### UPDATES TO dataframe subset function ######
# inflation adjustments for NA ... and improvements on subsetting
include.me = paste0(path.github, "humanVerseWSU/R/functions-str.R");
source_url( include.me );
include.me = paste0(path.github, "humanVerseWSU/R/functions-file.R");
source_url( include.me );
include.me = paste0(path.github, "humanVerseWSU/R/functions-dataframe.R");
source_url( include.me );
include.me = paste0(path.github, "humanVerseWSU/R/functions-inflation.R");
source_url( include.me );
wsu.id = "shawn-petersen"; # change this to yours.
path.to.secret = "D://WSU_DataAnalytics/STAT419/final_data_audit_secret/";
setwd(path.to.secret);
# these are the files you submitted for the "project-measure" assignment.  They should be placed in your _SECRETS_ path
file.xls = "my.measure.xlsx";
file.txt = "my.measure.txt";
# these are the instructor-provided files after merging the class submissions
instructor.raw.txt = "measure-students.txt";
instructor.clean = "final.measure.txt";
instructor.clean.cm = "cm.final.measure.txt";
library(readxl);
covariates = read_excel( paste0(path.to.secret,file.xls) , sheet="covariates");
library(readxl);
covariates = read_excel( paste0(path.to.secret,file.xls) , sheet="Covariates");
panel = read_excel( paste0(path.to.secret,file.xls)  , sheet="DataCollection");
covariates = as.data.frame(covariates);
panel = as.data.frame(panel);
my.txt = read.csv( paste0(path.to.secret,file.txt) , header=TRUE, sep="|", quote="");
covariates = read_excel( paste0(path.to.secret,file.xls) , sheet="Covariates");
panel = read_excel( paste0(path.to.secret,file.xls)  , sheet="DataCollection");
covariates = as.data.frame(covariates);
panel = as.data.frame(panel);
View(panel)
my.txt = read.csv( paste0(path.to.secret,file.txt) , header=TRUE, sep="|", quote="");
my.txt = read.csv( paste0(path.to.secret,file.txt) , header=TRUE, sep="|", quote="");
my.class = read.csv( paste0(path.to.secret,instructor.raw.txt) , header=TRUE, sep="|", quote="");
View(my.class)
my.audit = list();
# In your original XLS you should have prepared a 4th tab (that you did not upload), that contains your basic user id.  For me, my name was "MonteS"
data.collector = "MonteS";
persons = c("MonteS","AlexanderS");  # this should be the length of the subjects/participatnts
## you were supposed to make an MD5 hash of each (e.g., using md5.mshaffer.com or the humanVerse function)
my.audit$fourth = list();
my.audit$fourth$data.collector = data.collector;
my.audit$fourth$persons = persons;
my.audit$fourth$md5.data.collector = humanVerseWSU::md5(data.collector);
my.audit$fourth$md5.persons = humanVerseWSU::md5(persons);
View(my.audit)
# In your original XLS you should have prepared a 4th tab (that you did not upload), that contains your basic user id.  For me, my name was "MonteS"
data.collector = "Shawn Petersen";
persons = c("Pete Gregory","Shawn Petersen");  # this should be the length of the subjects/participatnts
## you were supposed to make an MD5 hash of each (e.g., using md5.mshaffer.com or the humanVerse function)
my.audit$fourth = list();
my.audit$fourth$data.collector = data.collector;
my.audit$fourth$persons = persons;
my.audit$fourth$md5.data.collector = humanVerseWSU::md5(data.collector);
my.audit$fourth$md5.persons = humanVerseWSU::md5(persons);
my.audit$covariates = list();
my.audit$covariates$persons = nrow(covariates);
my.audit$covariates$collectors = unique(covariates$data_collector);
my.audit$covariates$persons = covariates$person_id;
my.audit$covariates$units = covariates$units;
my.audit$fourth$md5.data.collector;
my.audit$covariates$collectors;
(my.audit$fourth$md5.data.collector == my.audit$covariates$collectors);
setwd("D:/WSU_DataAnalytics/STAT419/final_data_audit")
setwd("D:/WSU_DataAnalytics/STAT419/final_data_audit_secret")
# In your original XLS you should have prepared a 4th tab (that you did not upload), that contains your basic user id.  For me, my name was "MonteS"
data.collector = "Shawn Petersen";
persons = c("Pete Gregory","Shawn Petersen", "Somloab Petersen", "Jessica White","Brian Kleven", "SKleven", "GKleven", "Matt Frey", "Jamie Frey", "Natalie Frey");  # this should be the length of the subjects/participatnts
## you were supposed to make an MD5 hash of each (e.g., using md5.mshaffer.com or the humanVerse function)
my.audit$fourth = list();
my.audit$fourth$data.collector = data.collector;
my.audit$fourth$persons = persons;
my.audit$fourth$md5.data.collector = humanVerseWSU::md5(data.collector);
my.audit$fourth$md5.persons = humanVerseWSU::md5(persons);
my.audit$covariates = list();
my.audit$covariates$persons = nrow(covariates);
my.audit$covariates$collectors = unique(covariates$data_collector);
my.audit$covariates$persons = covariates$person_id;
my.audit$covariates$units = covariates$units;
my.audit$fourth$md5.data.collector;
my.audit$covariates$collectors;
(my.audit$fourth$md5.data.collector == my.audit$covariates$collectors);
# In your original XLS you should have prepared a 4th tab (that you did not upload), that contains your basic user id.  For me, my name was "MonteS"
data.collector = "Shawn Petersen";
persons = c("Pete Gregory","Shawn Petersen", "Somloab Petersen", "Jessica White","Brian Kleven", "SKleven", "GKleven", "Matt Frey", "Jamie Frey", "Natalie Frey");  # this should be the length of the subjects/participatnts
## you were supposed to make an MD5 hash of each (e.g., using md5.mshaffer.com or the humanVerse function)
my.audit$fourth = list();
my.audit$fourth$data.collector = data.collector;
my.audit$fourth$persons = persons;
my.audit$fourth$md5.data.collector = humanVerseWSU::md5(data.collector);
my.audit$fourth$md5.persons = humanVerseWSU::md5(persons);
my.audit$covariates = list();
my.audit$covariates$persons = nrow(covariates);
my.audit$covariates$collectors = unique(covariates$data_collector);
my.audit$covariates$persons = covariates$person_id;
my.audit$covariates$units = covariates$units;
View(my.audit)
print("persons");
my.audit$fourth$md5.persons;
print("covariates");
my.audit$covariates$persons
print("--DIFFERENCE--");
setdiff(my.audit$fourth$md5.persons, my.audit$covariates$persons);
setdiff(my.audit$covariates$persons, my.audit$covariates$persons);
# In your original XLS you should have prepared a 4th tab (that you did not upload), that contains your basic user id.  For me, my name was "MonteS"
data.collector = "Shawn Petersen";
#persons = c("Pete Gregory","Shawn Petersen", "Somloab Petersen", "Jessica White","Brian Kleven", "SKleven", "GKleven", "Matt Frey", "Jamie Frey", "Natalie Frey");
persons = c("Shawn Petersen");# this should be the length of the subjects/participatnts
## you were supposed to make an MD5 hash of each (e.g., using md5.mshaffer.com or the humanVerse function)
my.audit$fourth = list();
my.audit$fourth$data.collector = data.collector;
my.audit$fourth$persons = persons;
my.audit$fourth$md5.data.collector = humanVerseWSU::md5(data.collector);
my.audit$fourth$md5.persons = humanVerseWSU::md5(persons);
my.audit$covariates = list();
my.audit$covariates$persons = nrow(covariates);
my.audit$covariates$collectors = unique(covariates$data_collector);
my.audit$covariates$persons = covariates$person_id;
my.audit$covariates$units = covariates$units;
my.audit$fourth$md5.data.collector;
my.audit$covariates$collectors;
(my.audit$fourth$md5.data.collector == my.audit$covariates$collectors);
View(covariates)
# In your original XLS you should have prepared a 4th tab (that you did not upload), that contains your basic user id.  For me, my name was "MonteS"
data.collector = "Shawn Petersen";
#persons = c("Pete Gregory","Shawn Petersen", "Somloab Petersen", "Jessica White","Brian Kleven", "SKleven", "GKleven", "Matt Frey", "Jamie Frey", "Natalie Frey");
persons = c("Shawn Petersen", "Pete Gregory", "Matt Frey", "Brian Kleven");# this should be the length of the subjects/participatnts
## you were supposed to make an MD5 hash of each (e.g., using md5.mshaffer.com or the humanVerse function)
my.audit$fourth = list();
my.audit$fourth$data.collector = data.collector;
my.audit$fourth$persons = persons;
my.audit$fourth$md5.data.collector = humanVerseWSU::md5(data.collector);
my.audit$fourth$md5.persons = humanVerseWSU::md5(persons);
my.audit$covariates = list();
my.audit$covariates$persons = nrow(covariates);
my.audit$covariates$collectors = unique(covariates$data_collector);
my.audit$covariates$persons = covariates$person_id;
my.audit$covariates$units = covariates$units;
my.audit$fourth$md5.data.collector;
my.audit$covariates$collectors;
(my.audit$fourth$md5.data.collector == my.audit$covariates$collectors);
View(my.audit)
print("persons");
my.audit$fourth$md5.persons;
print("covariates");
my.audit$covariates$persons
print("--DIFFERENCE--");
setdiff(my.audit$fourth$md5.persons, my.audit$covariates$persons);
setdiff(my.audit$covariates$persons, my.audit$covariates$persons);
my.audit$panel = list();
my.audit$panel$entries = nrow(panel);
my.audit$panel$collectors = unique(panel$data_collector);
my.audit$panel$persons = unique(panel$person_id);
my.audit$panel$nas = sum( suppressWarnings( is.na(as.numeric(panel$mvalue))) );
my.audit$panel$entries.per.person = my.audit$panel$entries / length( unique(panel$person_id) );
my.audit$panel$nas.per.person = my.audit$panel$nas / length( unique(panel$person_id) );
my.audit$panel$heights = subsetDataFrame(panel, "mkey", "==", "height")$mvalue;
my.audit$panel$collectors;
my.audit$covariates$collectors;
(my.audit$panel$collectors == my.audit$covariates$collectors);
print("panel");
my.audit$panel$persons;
print("covariates");
my.audit$covariates$persons;
print("--DIFFERENCE--");
setdiff(my.audit$panel$persons, my.audit$covariates$persons);
setdiff(my.audit$covariates$persons, my.audit$panel$persons);
(my.audit$panel$entries.per.person == 28);
(my.audit$panel$entries.per.person == 10);
(my.audit$panel$entries.per.person == 3);
(my.audit$panel$entries.per.person == 3);
(my.audit$panel$entries.per.person == 28);
my.audit$txt = list();
my.audit$txt$cnames = colnames(my.txt);
my.audit$txt$entries = nrow(my.txt);
my.audit$txt$collectors = unique(my.txt$data_collector);
my.audit$txt$persons = unique(my.txt$person_id);
my.audit$txt$units = my.txt$units;
my.audit$txt$height = my.txt$height.NA;
my.audit$txt$armspan = my.txt$arm.span.NA;
my.audit$txt$ratio = my.audit$txt$height / my.audit$txt$armspan;
my.txt.u = removeDuplicatesFromDataFrameAllColumns(my.txt);
my.audit$txt.u = list();
my.audit$txt.u$cnames = colnames(my.txt.u);
my.audit$txt.u$entries = nrow(my.txt.u);
my.audit$txt.u$collectors = unique(my.txt.u$data_collector);
my.audit$txt.u$persons = unique(my.txt.u$person_id);
my.audit$txt.u$units = my.txt.u$units;
my.audit$txt.u$height = my.txt.u$height.NA;
my.audit$txt.u$armspan = my.txt.u$arm.span.NA;
(my.audit$txt$entries == my.audit$txt.u$entries);
View(my.audit)
my.audit$class = list();
my.audit$class$cnames = colnames(my.class);
(my.audit$class$cnames == my.audit$txt$cnames);
print("my data with duplicates removed");
my.audit$txt.u$units;
print("covariates");
my.audit$covariates$units;
print("--DIFFERENCE--");
setdiff(my.audit$txt.u$units, my.audit$covariates$units);
setdiff(my.audit$covariates$units, my.audit$txt.u$units);
print("my data with duplicates removed");
my.audit$txt.u$height;
print("panel");
my.audit$panel$heights;
print("--DIFFERENCE--");
setdiff(my.audit$txt.u$height, my.audit$panel$heights);
setdiff(my.audit$panel$heights, my.audit$txt.u$height);
ratio.df = as.data.frame(cbind(my.audit$txt.u$height, my.audit$txt.u$armspan, (my.audit$txt.u$height/my.audit$txt.u$armspan)   ));
colnames(ratio.df) = c("height","armspan", "height.armspan");
ratio.df;
isClose(ratio.df$height.armspan, 1, tol = 0.1);
# unique persons
my.data.in.class = removeDuplicatesFromDataFrameAllColumns(subsetDataFrame(my.class, "person_id", "==", my.audit$txt.u$persons, logic="OR"));
my.audit$data = list();
my.audit$data$entries = nrow(my.data.in.class);
my.audit$data$collectors = unique(my.data.in.class$data_collector);
my.audit$data$persons = unique(my.data.in.class$person_id);
my.audit$data$collectors;
my.audit$covariates$collectors;
(my.audit$data$collectors == my.audit$covariates$collectors);
(my.audit$data$collectors == humanVerseWSU::md5(my.audit$covariates$collectors));
my.data.in.class.n = my.data.in.class[,4:26]; # numeric fields
my.audit$data.n = list();
my.audit$data.n$entries = nrow(my.data.in.class.n);
my.data.in.class.nu = removeDuplicatesFromDataFrameAllColumns(my.data.in.class.n);
my.audit$data.nu = list();
my.audit$data.nu$entries = nrow(my.data.in.class.nu);
(my.audit$data.n$entries == my.audit$data.nu$entries);
# you need to upload the .rds and .html file after you KNIT ...
saveRDS(my.audit, paste0(path.to.git.final,"dataAudit.rds") );
my.audit = list();
View(my.audit)
my.audit$class = list();
my.audit$class$cnames = colnames(my.class);
(my.audit$class$cnames == my.audit$txt$cnames);
wsu.id = "shawn-petersen"; # change this to yours.
path.to.secret = "D://WSU_DataAnalytics/STAT419/final_data_audit_secret/";
setwd(path.to.secret);
# these are the files you submitted for the "project-measure" assignment.  They should be placed in your _SECRETS_ path
file.xls = "my.measure.xlsx";
file.txt = "my.measure.txt";
# these are the instructor-provided files after merging the class submissions
instructor.raw.txt = "measure-students.txt";
instructor.clean = "final.measure.txt";
instructor.clean.cm = "cm.final.measure.txt";
# these are the files you submitted for the "project-measure" assignment.  They should be placed in your _SECRETS_ path
file.xls = "my.measure.xlsx";
file.txt = "my.measure.txt";
# these are the instructor-provided files after merging the class submissions
instructor.raw.txt = "measure-students.txt";
instructor.clean = "final.measure.txt";
instructor.clean.cm = "cm.final.measure.txt";
library(readxl);
covariates = read_excel( paste0(path.to.secret,file.xls) , sheet="Covariates");
panel = read_excel( paste0(path.to.secret,file.xls)  , sheet="DataCollection");
covariates = as.data.frame(covariates);
panel = as.data.frame(panel);
my.txt = read.csv( paste0(path.to.secret,file.txt) , header=TRUE, sep="|", quote="");
my.class = read.csv( paste0(path.to.secret,instructor.raw.txt) , header=TRUE, sep="|", quote="");
my.audit = list();
# In your original XLS you should have prepared a 4th tab (that you did not upload), that contains your basic user id.  For me, my name was "MonteS"
data.collector = "Shawn Petersen";
#persons = c("Pete Gregory","Shawn Petersen", "Somloab Petersen", "Jessica White","Brian Kleven", "SKleven", "GKleven", "Matt Frey", "Jamie Frey", "Natalie Frey");
persons = c("Shawn Petersen", "Pete Gregory", "Matt Frey", "Brian Kleven");# this should be the length of the subjects/participatnts
## you were supposed to make an MD5 hash of each (e.g., using md5.mshaffer.com or the humanVerse function)
my.audit$fourth = list();
my.audit$fourth$data.collector = data.collector;
my.audit$fourth$persons = persons;
my.audit$fourth$md5.data.collector = humanVerseWSU::md5(data.collector);
my.audit$fourth$md5.persons = humanVerseWSU::md5(persons);
my.audit$covariates = list();
my.audit$covariates$persons = nrow(covariates);
my.audit$covariates$collectors = unique(covariates$data_collector);
my.audit$covariates$persons = covariates$person_id;
my.audit$covariates$units = covariates$units;
my.audit$fourth$md5.data.collector;
my.audit$covariates$collectors;
(my.audit$fourth$md5.data.collector == my.audit$covariates$collectors);
print("persons");
my.audit$fourth$md5.persons;
print("covariates");
my.audit$covariates$persons
print("--DIFFERENCE--");
setdiff(my.audit$fourth$md5.persons, my.audit$covariates$persons);
setdiff(my.audit$covariates$persons, my.audit$covariates$persons);
my.audit$panel = list();
my.audit$panel$entries = nrow(panel);
my.audit$panel$collectors = unique(panel$data_collector);
my.audit$panel$persons = unique(panel$person_id);
my.audit$panel$nas = sum( suppressWarnings( is.na(as.numeric(panel$mvalue))) );
my.audit$panel$entries.per.person = my.audit$panel$entries / length( unique(panel$person_id) );
my.audit$panel$nas.per.person = my.audit$panel$nas / length( unique(panel$person_id) );
my.audit$panel$heights = subsetDataFrame(panel, "mkey", "==", "height")$mvalue;
my.audit$panel$collectors;
my.audit$covariates$collectors;
(my.audit$panel$collectors == my.audit$covariates$collectors);
print("panel");
my.audit$panel$persons;
print("covariates");
my.audit$covariates$persons;
print("--DIFFERENCE--");
setdiff(my.audit$panel$persons, my.audit$covariates$persons);
setdiff(my.audit$covariates$persons, my.audit$panel$persons);
(my.audit$panel$entries.per.person == 28);
my.audit$txt = list();
my.audit$txt$cnames = colnames(my.txt);
my.audit$txt$entries = nrow(my.txt);
my.audit$txt$collectors = unique(my.txt$data_collector);
my.audit$txt$persons = unique(my.txt$person_id);
my.audit$txt$units = my.txt$units;
my.audit$txt$height = my.txt$height.NA;
my.audit$txt$armspan = my.txt$arm.span.NA;
my.audit$txt$ratio = my.audit$txt$height / my.audit$txt$armspan;
my.txt.u = removeDuplicatesFromDataFrameAllColumns(my.txt);
my.audit$txt.u = list();
my.audit$txt.u$cnames = colnames(my.txt.u);
my.audit$txt.u$entries = nrow(my.txt.u);
my.audit$txt.u$collectors = unique(my.txt.u$data_collector);
my.audit$txt.u$persons = unique(my.txt.u$person_id);
my.audit$txt.u$units = my.txt.u$units;
my.audit$txt.u$height = my.txt.u$height.NA;
my.audit$txt.u$armspan = my.txt.u$arm.span.NA;
(my.audit$txt$entries == my.audit$txt.u$entries);
my.audit$class = list();
my.audit$class$cnames = colnames(my.class);
(my.audit$class$cnames == my.audit$txt$cnames);
View(my.audit)
(my.audit$panel$entries.per.person == 23);
(my.audit$panel$entries.per.person == 23);  // was 28
(my.audit$panel$entries.per.person == 23);  #was 28
# you need to upload the .rds and .html file after you KNIT ...
saveRDS(my.object, paste0(path.to.git.final,"workspaceAudit.rds") );
library(devtools);
library(humanVerseWSU);
path.github = "https://raw.githubusercontent.com/MonteShaffer/humanVerseWSU/master/";
include.me = paste0(path.github, "misc/functions-nlp.R");
source_url( include.me );
include.me = paste0(path.github, "misc/functions-nlp-str.R");
source_url( include.me );
include.me = paste0(path.github, "misc/functions-nlp-stack.R");
source_url( include.me );
include.me = paste0(path.github, "misc/functions-nlp-pos.R");
source_url( include.me );
include.me = paste0(path.github, "humanVerseWSU/R/functions-encryption.R");
source_url( include.me );
###### UPDATES TO dataframe subset function ######
# inflation adjustments for NA ... and improvements on subsetting
include.me = paste0(path.github, "humanVerseWSU/R/functions-str.R");
source_url( include.me );
include.me = paste0(path.github, "humanVerseWSU/R/functions-file.R");
source_url( include.me );
include.me = paste0(path.github, "humanVerseWSU/R/functions-dataframe.R");
source_url( include.me );
include.me = paste0(path.github, "humanVerseWSU/R/functions-inflation.R");
source_url( include.me );
wsu.id = "shawn-petersen"; # change this to yours.
github.repository = "shawn-petersen/WSU_STATS419_FALL2020";
# be sure to change the notebook title at the top of this document to be "you" based on your wsu.id
path.to.git.local = "D://WSU_DataAnalytics/STAT419/";
setwd(path.to.git.local);
path.to.git.final = paste0(path.to.git.local,"final-exam/");
my.object = list();
sg = Sys.getenv();
snames = names(sg);
svals = as.character(sg);
sgdf = as.data.frame(cbind(snames,svals));
my.object$environment = sgdf;
sw = Sys.which(c("ftp", "ping", "texi2dvi", "this-does-not-exist", "make", "latex", "pdflatex", "luatex", "tinytex", "cmd", "git", "python", "pip", "tracert", "traceroute", "VirtualBox", "Dropbox"));
snames = names(sw);
svals = as.character(sw);
swdf = as.data.frame(cbind(snames,svals));
my.object$bin = swdf;
my.object$packages = as.data.frame(installed.packages());
my.object$local.dirs = list.dirs(path.to.git.local,recursive = FALSE);
my.object$local.files = list.files(path.to.git.local,recursive = TRUE);
View(swdf)
View(swdf)
# In your original XLS you should have prepared a 4th tab (that you did not upload), that contains your basic user id.  For me, my name was "MonteS"
data.collector = "Shawn Petersen";
persons = c("Shawn Petersen", "Somloab Petersen", "Jessica White", "Pete Gregory", "Matt Frey", "Jamie Frey", "Natalie Frey", "Brian Kleven", "Brian Son", "Brian Daughter");
## you were supposed to make an MD5 hash of each (e.g., using md5.mshaffer.com or the humanVerse function)
my.audit$fourth = list();
my.audit$fourth$data.collector = data.collector;
my.audit$fourth$persons = persons;
my.audit$fourth$md5.data.collector = humanVerseWSU::md5(data.collector);
my.audit$fourth$md5.persons = humanVerseWSU::md5(persons);
my.audit$covariates = list();
my.audit$covariates$persons = nrow(covariates);
my.audit$covariates$collectors = unique(covariates$data_collector);
my.audit$covariates$persons = covariates$person_id;
my.audit$covariates$units = covariates$units;
my.audit$fourth$md5.data.collector;
my.audit$covariates$collectors;
(my.audit$fourth$md5.data.collector == my.audit$covariates$collectors);
library(devtools);
library(humanVerseWSU);
path.github = "https://raw.githubusercontent.com/MonteShaffer/humanVerseWSU/master/";
include.me = paste0(path.github, "misc/functions-nlp.R");
source_url( include.me );
include.me = paste0(path.github, "misc/functions-nlp-str.R");
source_url( include.me );
include.me = paste0(path.github, "misc/functions-nlp-stack.R");
source_url( include.me );
include.me = paste0(path.github, "misc/functions-nlp-pos.R");
source_url( include.me );
include.me = paste0(path.github, "humanVerseWSU/R/functions-encryption.R");
source_url( include.me );
###### UPDATES TO dataframe subset function ######
# inflation adjustments for NA ... and improvements on subsetting
include.me = paste0(path.github, "humanVerseWSU/R/functions-str.R");
source_url( include.me );
include.me = paste0(path.github, "humanVerseWSU/R/functions-file.R");
source_url( include.me );
include.me = paste0(path.github, "humanVerseWSU/R/functions-dataframe.R");
source_url( include.me );
include.me = paste0(path.github, "humanVerseWSU/R/functions-inflation.R");
source_url( include.me );
wsu.id = "shawn_petersen"; # change this to yours.
path.to.secret = "D://WSU_DataAnalytics/STAT419/final_data_audit_secret/";
setwd(path.to.secret);
# these are the files you submitted for the "project-measure" assignment.  They should be placed in your _SECRETS_ path
file.xls = "my.measure.xlsx";
file.txt = "my.measure.txt";
# these are the instructor-provided files after merging the class submissions
instructor.raw.txt = "measure-students.txt";
instructor.clean = "final.measure.txt";
instructor.clean.cm = "cm.final.measure.txt";
# these are the files you submitted for the "project-measure" assignment.  They should be placed in your _SECRETS_ path
file.xls = "my.measure.xlsx";
file.txt = "my.measure.txt";
# these are the instructor-provided files after merging the class submissions
instructor.raw.txt = "measure-students.txt";
instructor.clean = "final.measure.txt";
instructor.clean.cm = "cm.final.measure.txt";
library(readxl);
covariates = read_excel( paste0(path.to.secret,file.xls) , sheet="Covariates");
panel = read_excel( paste0(path.to.secret,file.xls)  , sheet="DataCollection");
covariates = as.data.frame(covariates);
panel = as.data.frame(panel);
my.txt = read.csv( paste0(path.to.secret,file.txt) , header=TRUE, sep="|", quote="");
my.class = read.csv( paste0(path.to.secret,instructor.raw.txt) , header=TRUE, sep="|", quote="");
my.audit = list();
View(my.audit)
# In your original XLS you should have prepared a 4th tab (that you did not upload), that contains your basic user id.  For me, my name was "MonteS"
data.collector = "Shawn Petersen";
persons = c("Shawn Petersen", "Somloab Petersen", "Jessica White", "Pete Gregory", "Matt Frey", "Jamie Frey", "Natalie Frey", "Brian Kleven", "Brian Son", "Brian Daughter");
## you were supposed to make an MD5 hash of each (e.g., using md5.mshaffer.com or the humanVerse function)
my.audit$fourth = list();
my.audit$fourth$data.collector = data.collector;
my.audit$fourth$persons = persons;
my.audit$fourth$md5.data.collector = humanVerseWSU::md5(data.collector);
my.audit$fourth$md5.persons = humanVerseWSU::md5(persons);
View(my.audit)
my.audit$covariates = list();
my.audit$covariates$persons = nrow(covariates);
my.audit$covariates$collectors = unique(covariates$data_collector);
my.audit$covariates$persons = covariates$person_id;
my.audit$covariates$units = covariates$units;
my.audit$fourth$md5.data.collector;
my.audit$covariates$collectors;
(my.audit$fourth$md5.data.collector == my.audit$covariates$collectors);
# In your original XLS you should have prepared a 4th tab (that you did not upload), that contains your basic user id.  For me, my name was "MonteS"
data.collector = "Shawn Petersen";
#persons = c("Shawn Petersen", "Somloab Petersen", "Jessica White", "Pete Gregory", "Matt Frey", "Jamie Frey", "Natalie Frey", "Brian Kleven", "Brian Son", "Brian Daughter");
persons = c("Shawn Petersen", "Pete Gregory", "Matt Frey", "Brian Kleven");
## you were supposed to make an MD5 hash of each (e.g., using md5.mshaffer.com or the humanVerse function)
my.audit$fourth = list();
my.audit$fourth$data.collector = data.collector;
my.audit$fourth$persons = persons;
my.audit$fourth$md5.data.collector = humanVerseWSU::md5(data.collector);
my.audit$fourth$md5.persons = humanVerseWSU::md5(persons);
my.audit$covariates = list();
my.audit$covariates$persons = nrow(covariates);
my.audit$covariates$collectors = unique(covariates$data_collector);
my.audit$covariates$persons = covariates$person_id;
my.audit$covariates$units = covariates$units;
my.audit$fourth$md5.data.collector;
my.audit$covariates$collectors;
(my.audit$fourth$md5.data.collector == my.audit$covariates$collectors);
